// ---------- Datasource & Generator ----------
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  ARRIVED
  NO_SHOW
  CANCELLED
  COMPLETED
}

enum AdminRole {
  OWNER
  MANAGER
  STAFF
}

// ---------- Models ----------
model Pub {
  id           String  @id @default(cuid())
  slug         String  @unique
  name         String
  contactEmail String?
  active       Boolean @default(true)

  // Pub-level admin PIN (bcrypt hash)
  adminPinHash String?

  // Multiple admins per pub
  admins Admin[]

  // Billing (optional)
  stripeCustomerId String? @unique
  stripeAccountId  String?

  tables        Table[]
  sessions      Session[]
  subscriptions Subscription[]
  payments      Payment[]
  revenueShares RevenueShare[]
  Booking       Booking[]
  devices       Device[]
  scores        Score[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Admin {
  id     String    @id @default(cuid())
  pubId  String
  name   String
  email  String?   @unique
  role   AdminRole @default(STAFF)
  active Boolean   @default(true)

  pub Pub @relation(fields: [pubId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pubId])
}

model Table {
  id      String  @id @default(cuid())
  pubId   String
  label   String
  pinHash String
  active  Boolean @default(true)

  pub      Pub       @relation(fields: [pubId], references: [id])
  sessions Session[]
  bookings Booking[]
  devices  Device[]
  scores   Score[]

  @@index([pubId])
}

model Session {
  id        String    @id @default(cuid())
  pubId     String
  tableId   String
  status    String // "active" | "ended" | "expired"
  startedAt DateTime  @default(now())
  endsAt    DateTime
  endedAt   DateTime?

  pub       Pub       @relation(fields: [pubId], references: [id])
  table     Table     @relation(fields: [tableId], references: [id])
  payments  Payment[]
  booking   Booking?  @relation(fields: [bookingId], references: [id])
  bookingId String?   @unique  // ‚Üê FIXED: Required for 1-to-1

  @@index([pubId, tableId])
}

model Booking {
  id          String   @id @default(cuid())
  pubId       String
  tableId     String
  startAt     DateTime // UTC
  endAt       DateTime // UTC
  partyName   String?
  notes       String?
  depositPaid Boolean  @default(false)
  qrCode      String?  // URL to start session

  pub     Pub     @relation(fields: [pubId], references: [id])
  table   Table   @relation(fields: [tableId], references: [id])
  session Session?

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      BookingStatus  @default(PENDING)
  arrivedAt   DateTime?
  noShowAt    DateTime?
  cancelledAt DateTime?

  @@index([tableId, startAt])
  @@index([pubId, startAt])
  @@index([pubId, tableId, startAt])
  @@index([pubId, tableId, endAt])
}

model Subscription {
  id                 String    @id @default(cuid())
  pubId              String
  planId             String?
  status             String // "active" | "past_due" | "canceled"
  stripeSubId        String?   @unique
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?

  pub  Pub          @relation(fields: [pubId], references: [id])
  plan BillingPlan? @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pubId])
}

model BillingPlan {
  id            String  @id @default(cuid())
  code          String  @unique
  name          String
  type          String // "subscription" | "revenue_share"
  priceGBP      Int?   // pence, for subscription
  shareBps      Int?   // basis points, for revenue share
  stripePriceId String?

  subscriptions Subscription[]
}

model Payment {
  id         String  @id @default(cuid())
  pubId      String
  sessionId  String?
  amountGBP  Int
  method     String
  stripePiId String? @unique
  status     String // "succeeded", "refunded", etc.
  meta       Json?

  pub     Pub      @relation(fields: [pubId], references: [id])
  session Session? @relation(fields: [sessionId], references: [id])

  createdAt DateTime @default(now())

  @@index([pubId])
  @@index([sessionId])
}

model RevenueShare {
  id        String    @id @default(cuid())
  pubId     String
  period    String // "YYYY-MM"
  grossGBP  Int
  shareBps  Int
  feeGBP    Int
  settled   Boolean   @default(false)
  settledAt DateTime?
  note      String?

  pub Pub @relation(fields: [pubId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pubId, period])
}

// ---------- Added models ----------
model Device {
  id          String   @id @default(cuid())
  pubId       String
  tableId     String?
  deviceId    String   @unique
  claimedAt   DateTime?
  lastSeenAt  DateTime? @default(now())
  batteryPct  Int?
  status      String    @default("active")

  pub   Pub    @relation(fields: [pubId], references: [id])
  table Table? @relation(fields: [tableId], references: [id])

  @@index([pubId])
  @@index([tableId])
}

model Score {
  id         String   @id @default(cuid())
  pubId      String
  tableId    String?
  playerName String?
  points     Int
  createdAt  DateTime @default(now())

  pub   Pub    @relation(fields: [pubId], references: [id])
  table Table? @relation(fields: [tableId], references: [id])

  @@index([pubId, createdAt])
  @@index([tableId, createdAt])
}